<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# 	
	var now = DateTime.Now;
	var dt = now.ToString("yyyy/MM/dd");
#>
/*
	© <#= now.Year.ToString() #> Florida Division of Emergency Management. All rights reserved.

	History
	==============================================================================
	<#= dt #>	Scaf	Created.
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using AHCA.Utilities;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>

namespace <#= Model.RepositoryNamespace #>
{ 
<# 
    var modelType = (CodeType)Model.ModelType; 
	var modelProperties = modelType.VisibleMembers().OfType<EnvDTE.CodeProperty>();
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name;
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = modelType.IsAssignableTo<System.Data.Objects.ObjectContext>(); // ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
    public class <#= modelName #>Repository : I<#= modelName #>Repository
    {
        <#= contextName #> context;
		Controller _controller;

		private string User { get { return _controller != null ? Utilities.BaseUserName(_controller.User.Identity) : "Unknown"; } } 

		public <#= modelName #>Repository(Controller controller, <#= contextName #> _context = null)
		{
			_controller = controller;
			context = _context == null ? new <#= contextName #>() : _context;
		}

        public IQueryable<<#= modelName #>> All
        {
            get { return context.<#= modelNamePlural #>; }
        }

		public <#= modelName #> New()
		{
			return new <#= modelName #>
			{
				CreatedBy = this.User,
				CreatedDate = DateTime.Now,
			};
		}

        public <#= modelName #> Find(<#= primaryKeyProperty.Type.AsString #> id)
        {
<# if(isObjectContext) { #>
            return context.<#= modelNamePlural #>.Single(x => x.<#= Model.PrimaryKey #> == id);
<# } else { #>
            return context.<#= modelNamePlural #>.Find(id);
<# } #>
        }
 
		// Uncomment this after running Search custom scaffolder: Scaffold Search <#= modelName #> -ControllerName #CONTROLLER_NAME_HERE# -Force
/*
		public Search_<#= modelName #>DTO Search(Search_<#= modelName #>DTO search)
		{
			try
			{
				search.Term1 = string.IsNullOrWhiteSpace(search.Term1) ? null : search.Term1;

				var result = from r in context.<#= modelName #>
// ------ Edit this to apply terms to desired fields in the desired way
//							 where (r.StringField.Contains(search.Term1) || search.Term1 == null)
//								&& (r.IntField == search.Term2 || search.Term2 == null)
//								&& (r.DateTimeField == search.Term3 || search.Term3 == null)
//								&& (r.DecimalField == search.Term4) || search.Term4 == null)
							 select r;

				search.recCount = result.Count();

				// Apply sort order
				var applyOrdering = search.Orderings[search.sort];
				result = applyOrdering(result, search.sortDir == "ASC");

				// Take a page of data
				var recs = result.Skip(search.skip).Take(search.recsPerPage);
				search.results = recs.ToList();
			}
			catch (Exception ex)
			{
				Utilities.LogException(_controller, ex);
				search.results = new List<<#= modelName #>>();
			}

			search.refreshAll = false;

			return search;
		}
*/
        public bool InsertOrUpdate(<#= modelName #> <#= modelName.ToLower() #>)
        {
            if (<#= modelName.ToLower() #>.<#= Model.PrimaryKey #> == default(<#= primaryKeyProperty.Type.AsString #>)) {
                // New entity
<#
foreach (var property in modelProperties) {
	if(property.Name == "CreatedBy") {
#>
				<#= modelName.ToLower() #>.CreatedBy = this.User;
<#
	}
	if(property.Name == "CreatedDate") {
#>
				<#= modelName.ToLower() #>.CreatedDate = DateTime.Now;
<#
	}
}	
if(primaryKeyProperty.Type.AsString == "System.Guid") { #>
                <#= modelName.ToLower() #>.<#= primaryKeyProperty.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                context.<#= modelNamePlural #>.AddObject(<#= modelName.ToLower() #>);
<# } else { #>
                context.<#= modelNamePlural #>.Add(<#= modelName.ToLower() #>);
<# } #>
            } else {
                // Existing entity
<#
foreach (var property in modelProperties) {
	if(property.Name == "UpdatedBy") {
#>
				<#= modelName.ToLower() #>.UpdatedBy = this.User;
<#
	}
	if(property.Name == "UpdatedDate") {
#>
				<#= modelName.ToLower() #>.UpdatedDate = DateTime.Now;
<#
	}
}	
if(isObjectContext) { #>
				if(<#= modelName.ToLower() #>.EntityState == System.Data.EntityState.Detached)
				{
					context.<#= modelNamePlural #>.Attach(<#= modelName.ToLower() #>);
					context.ObjectStateManager.ChangeObjectState(<#= modelName.ToLower() #>, EntityState.Modified);
				}
<# } else { #>
				context.Entry(<#= modelName.ToLower() #>).State = EntityState.Modified;
<# } #>
            }

			return this.Save() > 0;
        }

		public bool Delete(<#= primaryKeyProperty.Type.AsString #> id)
		{
<# if(isObjectContext) { #>
			var <#= modelName.ToLower() #> = context.<#= modelNamePlural #>.Single(x => x.<#= Model.PrimaryKey #> == id);
			context.<#= modelNamePlural #>.DeleteObject(<#= modelName.ToLower() #>);
<# } else { #>
			var <#= modelName.ToLower() #> = context.<#= modelNamePlural #>.Find(id);
			context.<#= modelNamePlural #>.Remove(<#= modelName.ToLower() #>);
<# } #>
			return this.Save() > 0;
		}

        public int Save()
        {
            try
            {
                return context.SaveChanges();
            }
            catch (Exception ex)
            {
                Utilities.LogException(_controller, ex);
                return 0;
            }
        }

        public void Dispose() 
        {
            context.Dispose();
        }
    }

    public interface I<#= modelName #>Repository : IDisposable
    {
        IQueryable<<#= modelName #>> All { get; }
		<#= modelName #> New();
        <#= modelName #> Find(<#= primaryKeyProperty.Type.AsString #> id);
        bool InsertOrUpdate(<#= modelName #> <#= modelName.ToLower() #>);
        bool Delete(<#= primaryKeyProperty.Type.AsString #> id);

//		Search_<#= modelName #>DTO Search(Search_<#= modelName #>DTO search);
    }
}

