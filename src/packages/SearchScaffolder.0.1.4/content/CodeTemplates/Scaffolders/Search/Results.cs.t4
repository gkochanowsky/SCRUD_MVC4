<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<# 
	var now = DateTime.Now;
	var dt = now.ToString("yyyy/MM/dd"); 
	var modelType = (CodeType)Model.ModelType;
	var searchModelType = (CodeType)Model.SearchModelType;
	var name = modelType.Name;
	var searchDtoName = "Search_" + name + "DTO";
	var searchDTOFullName = modelType.FullName.Replace(name, "") + searchDtoName;
	var modelViewName = name.Replace("_", "-").ToLower();
	var prps = GetModelProperties(modelType);

	var hiddenFlds = new List<string>() { "isDeleted", "UpdatedBy", "UpdatedDate", "formView", "funcRefresh" };

	string cpr = "(c) " + now.Year.ToString();
#>
@{
/*
 *	<#= cpr #> Florida Division of Emergency Management. All rights reserved.
 *
 *	DESC: View for Search Results for data type - <#= name #>
 *
 *	NOTES: Created with MVC Scaffolding https://www.nuget.org/packages/MvcScaffolding/
 *			using a custom scaffolder called "Search" with the Package Manager Console command line:  
 *
 *				Scaffold Search <#= name #> -DbContextType <#= Model.DbContextName #> -ControllerName <#= Model.ControllerName #> -Force
 *
 *	History
 *	==============================================================================
 *	<#= dt #>	Scaf	Created.
 *
*/
}
<# if(modelType != null) { #>
@model <#= searchDTOFullName #>
@using <#= Model.Namespace #>.Models
<# } #>
@{
	int parentID = 0; // Set this to appropriate value.
	var createAction = Url.Action("CreateOrEdit", "<#= Model.ControllerName #>", new { id = "", formView = Model.DialogView, funcRefresh = Model.funcRefresh });
	var editAction = Url.Action("CreateOrEdit",  "<#= Model.ControllerName #>", new { id = "**", formView = Model.DialogView, funcRefresh = Model.funcRefresh });
	var deleteAction = Url.Action("Delete",  "<#= Model.ControllerName #>", new { id = "**", formView = Model.DialogView, funcRefresh = Model.funcRefresh });
    
	var entity = new <#= name #>();
}

<table class="GridTable" style="text-align:left;">
	<tr>
@if(Model.hasSelect) {
		<th></th> }
		<th></th>
<#
foreach (var n in prps) {
	if(!hiddenFlds.Any(n.Name.Contains)) {
#>
		<th><a href="#" onclick="SortSearchResults('@Html.DisplayNameFor(_ => entity.<#= n.Name #>)', '@Model.FormID'); return false;">@Html.DisplayNameFor(_ => entity.<#= n.Name #>)</a></th>
<#
	}
}
#>
        <th><a href="#" onclick="return @(Model.funcOpen)(null, '@createAction');">Create</a></th>
	</tr>

@if (Model.results.Count() > 0)
{
	foreach (var item in Model.results)
	{
		string toggleID = (Model.FormView + "-tgl-" + item.<#= Model.PrimaryKey #>).ToLower().Replace("_", "-");
		string rowID = (Model.FormView + "-" + item.<#= Model.PrimaryKey #>).ToLower().Replace("_", "-");
		var action = Url.Action("Details", "<#= Model.ControllerName #>", new { id = item.<#= Model.PrimaryKey #> });

	<tr id="@rowID">
@if(Model.hasSelect) {
		<td><a href="#" onclick="return @(Model.funcSelect)(@item.<#= Model.PrimaryKey #>);" style="margin-right:5px;margin-left:5px;">Select</a></td> }
		<td style="width:1.5em;"><a title="Show/Hide Details" id="@toggleID" href="#" onclick="Toggle(null, '@toggleID', '@action', '@rowID');return false;" class="toggle-link-show">[show]</a></td>
<#
foreach (var n in prps) {
	if(!hiddenFlds.Any(n.Name.Contains)) {
#>
		<td>@Html.DisplayFor(_ => item.<#= n.Name #>)</td>
<#
	}
}
#>
		<td style="text-align:center;">
			<a href="#" onclick="return @(Model.funcOpen)(@item.<#= Model.PrimaryKey #>, '@editAction');">Edit</a> |
			<a href="#" onclick="return @(Model.funcOpen)(@item.<#= Model.PrimaryKey #>, '@deleteAction');">Delete</a>
		</td>
	</tr>	
	}
} else {
	<tr><td colspan="<#= (prps.Count() + 2).ToString() #>" class="no-data">@DEM.Models.GlobalConstants.NoData</td></tr>
}
</table>

<script type="text/javascript">
	function @(Model.funcRefresh)(parentID) {
		LoadSearchResults(null, '@Model.FormID');
@if(!string.IsNullOrWhiteSpace(Model.funcParentRefresh)) {
		@(Model.funcParentRefresh + "(parentID);"); }
		return false;
	}

	function @(Model.funcOpen)(id, action) {
		OpenForm(null, '@Model.DialogView', action.replace("**", id));
		return false;
	}

@if (Model.hasSelect)
{ <text>
	function @(Model.funcSelect)(id) {
		@(Model.funcParentSelect)(id);
		$("#@Model.FormView").dialog('close');
		return false;
	} </text>
}
</script>

<#+
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool IsNullable { get; set; }
}

List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo) {
	List<ModelProperty> results = GetEligibleProperties(typeInfo);

	// Update ValueExpression here.

	return results;
}

List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo)  {
	List<ModelProperty> results = new List<ModelProperty>();

	if(typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && IsBindableType(prop.Type)) {
				results.Add(new ModelProperty {
					Name = prop.Name.ToString(),
					Type = prop.Type,
					IsNullable = prop.Type.AsFullName.Contains(".Nullable<") // .IsGenericType && prop.GetGenericTypeDefinition() == typeof(Nullable<>)
				});
			}
		}
	}

	return results;
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>