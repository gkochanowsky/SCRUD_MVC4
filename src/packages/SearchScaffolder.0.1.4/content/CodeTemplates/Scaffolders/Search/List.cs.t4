<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# 	
	var now = DateTime.Now;
	var dt = now.ToString("yyyy/MM/dd"); 
	var modelType = (EnvDTE.CodeType)Model.ModelType;
	var name = modelType.Name;
	var searchDtoName = "Search_" + name + "DTO";
	var searchDTOFullName = modelType.FullName.Replace(name, "") + searchDtoName;
	var modelViewName = name.Replace("_", "-").ToLower();
	var prps = GetModelProperties(modelType);

	int cols = 1;
#>
@{
/*
 *	© <#= now.Year.ToString() #> Florida Division of Emergency Management. All rights reserved.
 *
 *	Desc: Partial view of record list
 *
 *	NOTES: Created with MVC Scaffolding https://www.nuget.org/packages/MvcScaffolding/
 *			using a custom scaffolder called "Search" with the Package Manager Console command line:  
 *
 *				Scaffold Search <#= Model.ModelTypeName #> -DbContextType <#= Model.DbContextName #> -ControllerName <#= Model.ControllerName #> -Force
 *
 *	History
 *	==============================================================================
 *	<#= dt #>	Scaf	Created.
*/
}
<# if(modelType != null) { #>
@model IEnumerable<<#= modelType.FullName #>>
@using <#= Model.Namespace #>.Models
<# } #>

@{
	int parentID = (ViewBag.ParentID as int?).GetValueOrDefault();
	string parentIDstr = (parentID >= 0 ? "" : "m") + System.Math.Abs(parentID);
	string formView = ViewBag.formView != null ? (ViewBag.formView as string).ToLower().Replace("_", "-") : "";
	string funcParentRefresh = ViewBag.funcRefresh != null ? (ViewBag.funcRefresh as string) : "";
	string funcRefresh = "Refresh_" + formView.Replace("-", "_");
	var dialog = formView + "-dlg"; // Create, Edit, Delete dialog container.

	var reloadFunc = !string.IsNullOrWhiteSpace(funcRefresh) ? ", function () { " + funcRefresh + "(); }" : "";
	var selectFunc = "Update_" + formView.Replace("-", "_") + "_OnSelect";
	var openDlgFunc = "Open_" + dialog.Replace("-", "_");

	var addAction = Url.Action("Search", "<#= Model.ControllerName #>", new { id = parentID, formView = dialog, funcRefresh = funcRefresh, funcSelect = selectFunc, showAll = true });
	var editAction = Url.Action("CreateOrEdit", "<#= Model.ControllerName #>", new { id = "**", Version = parentID, formView = dialog, funcRefresh = funcRefresh });
	var deleteAction = Url.Action("Delete", "<#= Model.ControllerName #>", new { id = "**", formView = dialog, funcRefresh = funcRefresh });

	var reloadAction = Url.Action("List", "<#= Model.ControllerName #>", new { id = parentID, formView = formView });
}

<table class="GridTable" style="text-align:left;">
	<tr>
<# foreach (var n in prps) { #>
		<th>@Html.DisplayNameFor(_ => _.<#= n.Name #>)</th>
<#		++cols;
   } #>
		<th><a href="#" onclick="return @(openDlgFunc)(null, '@addAction');">Add</a></th>
	</tr>

@if(Model.Count() > 0) {
	foreach (var item in Model) {
	<tr>
<# foreach (var n in prps) { #>
		<td>@Html.DisplayFor(_ => item.<#= n.Name #>)</td>
<# } #>
	<# if (!String.IsNullOrEmpty(Model.PrimaryKeyName)) { #>	
		<td style="text-align:center;">
			<a href="#" onclick="return @(openDlgFunc)(@item.<#= Model.PrimaryKeyName #>, '@editAction');">Edit</a> |
			<a href="#" onclick="return @(openDlgFunc)(@item.<#= Model.PrimaryKeyName #>, '@deleteAction');">Delete</a>
		</td>
	<# } else { #>	
		<td style="text-align:center;">
			<a href="#" onclick="return @(openDlgFunc)(@item.PrimaryKey, '@editAction');">Edit</a> |
			<a href="#" onclick="return @(openDlgFunc)(@item.PrimaryKey, '@deleteAction');">Delete</a>
		</td>	
	<# } #>		
	</tr>	
	}
} else {
	<tr><td colspan="<#= cols.ToString() #>" class="no-data">@DEM.Models.GlobalConstants.NoData</td></tr>
}
</table>

<script type="text/javascript">
	function @(funcRefresh)(parentID) {
		OpenForm(null, '@formView', '@reloadAction');
@if(!string.IsNullOrWhiteSpace(funcParentRefresh)) {
		@(funcParentRefresh + "(parentID);")
}
		return false;
	}

	@* Open up a create/edit/delete dialog *@
	function @(openDlgFunc)(id, action) {
		OpenForm(null, '@dialog', action.replace("**", id));
		return false;
	}

	function @(selectFunc)(id) {
		alert("selected: " + id);
	}
</script>
<#+
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool IsNullable { get; set; }
}

List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo) {
	List<ModelProperty> results = GetEligibleProperties(typeInfo);

	// Update ValueExpression here.

	return results;
}

List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo)  {
	List<ModelProperty> results = new List<ModelProperty>();

	if(typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && IsBindableType(prop.Type)) {
				results.Add(new ModelProperty {
					Name = prop.Name.ToString(),
					Type = prop.Type,
					IsNullable = prop.Type.AsFullName.Contains(".Nullable<") // .IsGenericType && prop.GetGenericTypeDefinition() == typeof(Nullable<>)
				});
			}
		}
	}

	return results;
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>