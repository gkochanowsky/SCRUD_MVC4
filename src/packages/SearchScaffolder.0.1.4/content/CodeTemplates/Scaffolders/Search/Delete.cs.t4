<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# 
	var viewDataType = (EnvDTE.CodeType) Model.ModelType;
	var now = DateTime.Now;
	var dt = now.ToString("yyyy/MM/dd"); 
	var props = GetModelProperties(viewDataType, false);
	var searchModelType = (EnvDTE.CodeType)Model.SearchModelType;
	var viewModelName = Model.ModelTypeName.Replace("_", "-").ToLower();
#>
@{
/*
 *	 © <#= now.Year.ToString() #> Florida Division of Emergency Management. All rights reserved.
 *
 *	DESC: Delete View for to work with Search - <#= searchModelType.Name #>
 *
 *	NOTES: Created with MVC Scaffolding https://www.nuget.org/packages/MvcScaffolding/
 *			using a custom scaffolder called "Search" with the Package Manager Console command line:  
 *
 *				Scaffold Search <#= Model.ModelTypeName #> -DbContextType <#= Model.DbContextName #> -ControllerName <#= Model.ControllerName #> -Force
 *
 *	History
 *	==============================================================================
 *	<#= dt #>	Scaf	Created.
*/
}
<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>

<# } #>
<h2><#= Model.ViewName #></h2>

<h3>Are you sure you want to delete this?</h3>
<fieldset class="app-fieldset popup-width-std">
    <legend><#= Model.ModelTypeName ?? String.Empty #></legend>
<#
foreach (ModelProperty property in props) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>

	<div class="editor-row">
		<div class="editor-column-4 label display-label">
			@Html.LabelFor(model => model.<#= property.Name #>)
		</div>
		<div class="editor-column-w display-field">
			@Html.DisplayFor(model => model.<#= property.Name #>)<br />
		</div>
	</div>
<#
	}
}
#>
</fieldset>
@{
	string dialog = (string.IsNullOrWhiteSpace(Model.formView) ? "<#= viewModelName #>-dlg" : Model.formView.ToLower().Replace("_", "-")); // View Container Name
	string funcRefresh = string.IsNullOrWhiteSpace(Model.funcRefresh as string) ? null : Model.funcRefresh as string;
	string funcDelete = "Delete_" + dialog.Replace("-", "_");
	string formID = dialog + "-frm";	
}
@using (Html.BeginForm("Delete", "<#= Model.ControllerName #>", FormMethod.Post, new { id = formID, name = formID })) {
    <p style="text-align:center">
       <input type="button" value="Delete" onclick="return @(funcDelete)(this);" /> 
    </p>
}

<script type="text/javascript">
    function @(funcDelete)(btn) {
        PostForm('@dialog', '@formID', @if(funcRefresh == null) { <text>null</text> } else { <text>function () { @funcRefresh (null); }</text> }, function () { btn.disabled = false; }, function () { btn.disabled = true; });
        return false;
    }
</script>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});				
			}			
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>